"""
Tic-Tac-Toe (X-O Game) - Beginner Python Project

This program is a simple implementation of the classic Tic-Tac-Toe game
played between a user (O) and the computer (X). The board is a 3x3 grid,
and the game checks for a win or draw after each move.

Features:
- Input handling and validation
- Random computer moves
- Win and draw detection
- ASCII board display
"""

import sys  # For exiting the game when the user wants to quit
from random import randrange  # For generating random moves for the computer

# Initialize the board with numbers from 1 to 9
board = []
for j in range(3):
    row = []
    for i in range(3):
        row.append(3 * j + i + 1)  # Fill the board row-wise with numbers
    board.append(row)

def display_board(board):
    """
    Displays the current state of the game board in a formatted layout.
    """
    print("+-------" * 3, "+", sep="")
    for row in range(3):
        print("|       " * 3, "|", sep="")
        for col in range(3):
            print("|   " + str(board[row][col]) + "   ", end="")  # Print cell value
        print("|")
        print("|       " * 3, "|", sep="")
        print("+-------" * 3, "+", sep="")

def moves():
    """
    Handles the user move and the computer move.
    Validates input, checks if the cell is already taken,
    updates the board, and displays the updated board.
    """
    user_move = input("Enter your move: ")  # User inputs a number or 'q' to quit

    if user_move.isdigit():
        user_move = int(user_move)
    elif user_move.lower() == "q":
        print("\nSee you later!\n")
        sys.exit()  # Exit the game gracefully if the user types 'q'
    else:
        print("Invalid move. Try again.")
        return  # Return if input is not valid

    # Check if move is in range and the cell is not taken
    if 1 <= user_move <= 9:
        row = (user_move - 1) // 3
        col = (user_move - 1) % 3

        if board[row][col] != 'X' and board[row][col] != 'O':
            board[row][col] = 'O'  # Mark user move with 'O'
            display_board(board)  # Display updated board
            print("\n")
        else:
            print("Invalid move. Try again.")  # Cell already taken
            return
    else:
        print("Invalid move. Try again.")  # Out of valid range
        return

    # Computer's turn: random move to an empty cell
    while True:
        com_move = randrange(1, 10)  # Random number from 1 to 9
        row = (com_move - 1) // 3
        col = (com_move - 1) % 3
        if board[row][col] != 'X' and board[row][col] != 'O':
            board[row][col] = 'X'  # Mark computer move with 'X'
            display_board(board)  # Display updated board
            break

def check_winner(board):
    """
    Checks if either player has won the game.
    Returns 'X' if the computer wins, 'O' if the user wins, or None otherwise.
    """
    # All possible winning combinations (rows, columns, diagonals)
    winner = [
        [(0, 0), (0, 1), (0, 2)],  # Row 1
        [(1, 0), (1, 1), (1, 2)],  # Row 2
        [(2, 0), (2, 1), (2, 2)],  # Row 3
        [(0, 0), (1, 0), (2, 0)],  # Column 1
        [(0, 1), (1, 1), (2, 1)],  # Column 2
        [(0, 2), (1, 2), (2, 2)],  # Column 3
        [(0, 0), (1, 1), (2, 2)],  # Diagonal \
        [(0, 2), (1, 1), (2, 0)],  # Diagonal /
    ]

    for line in winner:
        if all(board[row][col] == 'X' for row, col in line):
            print("You Lose!")  # Computer wins
            return 'X'
        elif all(board[row][col] == 'O' for row, col in line):
            print("You Win!")  # User wins
            return 'O'

    return None  # No winner yet

def check_draw():
    """
    Checks if all cells are filled and there is no winner.
    Returns True if it's a draw, False otherwise.
    """
    for row in board:
        for cell in row:
            if cell != 'X' and cell != 'O':
                return False  # Found an empty cell, so not a draw
    return True  # All cells filled, it's a draw

# Start of the game
print("""
Welcome to The Tic-Tac-Toe Game!
""")

board[1][1] = 'X'  # Predefined move: Computer starts by placing 'X' in the center

print("\n")
display_board(board)  # Show initial board
print("\n")

# Main game loop
while True:
    moves()  # Handle user and computer moves
    winner = check_winner(board)  # Check for a winner
    if winner == 'X' or winner == 'O':
        break  # End game if there's a winner
    elif check_draw():
        print("It's a draw!")  # End game if it's a draw
        break
