"""
Day of the Year Calculator

This script determines the ordinal day number of a given date 
(e.g., January 1 = 1, December 31 = 365 or 366 for leap years).
It validates the Gregorian calendar rules and accounts for leap years.

Author: [Your Name]
"""

def is_year_leap(year):
    """
    Determines whether a given year is a leap year,
    according to Gregorian calendar rules.

    Args:
        year (int): The year to check.

    Returns:
        bool: True if it's a leap year, False otherwise.
        None: If the year is before 1582 (Gregorian calendar start).
    """
    if year < 1582:
        print("Not within the Gregorian calendar period")
        return None
    elif year % 4 != 0:
        return False
    elif year % 100 != 0:
        return True
    elif year % 400 != 0:
        return False
    else:
        return True


def days_in_month(year, month):
    """
    Returns the number of days in the given month for a specified year.
    Takes into account leap years for February.

    Args:
        year (int): The year (must be 1582 or later).
        month (int): The month (1 through 12).

    Returns:
        int: Number of days in the specified month.
        None: If the year or month is invalid.
    """
    if year < 1582 or month < 1 or month > 12:
        return None

    days = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]
    res = days[month - 1]
    if month == 2 and is_year_leap(year):
        res = 29
    return res


def day_of_year(year, month, day):
    """
    Calculates the day number within the year for the given date.
    For example: January 1st = 1, February 1st = 32 (in non-leap year), etc.

    Args:
        year (int): The year.
        month (int): The month (1-12).
        day (int): The day of the month.

    Returns:
        int: The ordinal day number (1 to 365/366).
        None: If the date is invalid.
    """
    # Basic input validation
    if year < 1582 or month < 1 or month > 12 or day < 1:
        return None

    # Validate day range for the month
    days = days_in_month(year, month)
    if days is None or day > days:
        return None

    # Sum up days from previous months
    total_days = 0
    for i in range(1, month):
        total_days += days_in_month(year, i)

    return total_days + day


# ---- User Input Section ----

# Prompt user for date input
year = int(input("Please enter year: "))
month = int(input("Please enter month: "))
day = int(input("Please enter day: "))

# Calculate and display result
print(day_of_year(year, month, day))
